# -*- coding: utf-8 -*-

import os
import asyncio
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher
# --- ูุฐุง ูู ุงูุชุตุญูุญ ุงูุฌุฐุฑู ูุงูููุงุฆู ---
from aiogram.contrib.fsm_storage.mongo import MongoStorage

from config import TELEGRAM_TOKEN, MONGO_URI
from bot.utils.loader import auto_register_handlers
from bot.database.manager import db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- ุฏุงูุฉ ูุชุดุบูู ุงูุจูุช ---
async def start_bot():
    """ูููู ุจุฅุนุฏุงุฏ ูุชุดุบูู ุงูุจูุช."""
    bot = Bot(token=TELEGRAM_TOKEN)
    
    # --- ุงุณุชุฎุฏุงู ุงูุชุฎุฒูู ุงูุฏุงุฆู ุจุงูุทุฑููุฉ ุงูุฑุณููุฉ ูุงูุตุญูุญุฉ ---
    storage = MongoStorage(uri=MONGO_URI, db_name="aiogram_fsm")
    
    dp = Dispatcher(bot, storage=storage)

    # ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฎุงุตุฉ ุจูุง
    if not await db.connect_to_database(MONGO_URI):
        logger.critical("โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุชุ ูุง ูููู ุชุดุบูู ุงูุจูุช.")
        return

    # ุงุณุชุฏุนุงุก "ุงูููุชุด ุงูุขูู" ูุชุณุฌูู ูู ุงููุนุงูุฌุงุช
    auto_register_handlers(dp)

    # ุจุฏุก ุงูุงุณุชุทูุงุน ูุงุณุชูุจุงู ุงูุฑุณุงุฆู
    logger.info("โ ุงูุจูุช ุฌุงูุฒ ููุนูู ูููุชุธุฑ ุงูุฑุณุงุฆู...")
    await dp.start_polling()

# --- ุฎุงุฏู ููุจ ูุชุฒุงูู (aiohttp) ---
async def handle_root(request):
    """ุตูุญุฉ ุจุณูุทุฉ ูุฅุจูุงุก ุงูุฎุฏูุฉ ูุดุทุฉ."""
    return web.Response(text="Bot is alive and running!")

async def start_web_server():
    """ูุจุฏุฃ ุชุดุบูู ุฎุงุฏู ุงูููุจ ุจุดูู ูุชุฒุงูู."""
    app = web.Application()
    app.router.add_get("/", handle_root)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    try:
        await site.start()
        logger.info(f"๐ ุฎุงุฏู ุงูููุจ ูุนูู ุนูู ุงููููุฐ {port}")
        await asyncio.Event().wait()
    finally:
        await runner.cleanup()

# --- ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ุงูุชู ุชุฌูุน ูู ุดูุก ---
async def main():
    """ุชุดุบู ุฎุงุฏู ุงูููุจ ูุงูุจูุช ูู ููุณ ุงูููุช."""
    await asyncio.gather(
        start_web_server(),
        start_bot()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("...ุฅููุงู ุงูุจูุช")
